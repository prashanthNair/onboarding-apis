service:
  name: brand-onboarding-rest-apis
package:
  individually: true

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-deployment-bucket
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ap-south-1
  profile: serverless-admin
  deploymentBucket:
    name: brand-onboarding-rest-apis
    serverSideEncryption: AES256
  environment:
    BRAND_TABLE_NAME: ${self:custom.BrandTable.name}
    BRAND_BUCKET_NAME: ${self:custom.BrandBucket.name}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:ap-south-1:670022476151:table/Brand-dev
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: arn:aws:s3:::${self:custom.BrandBucket.name}/*

resources:
  Resources:
    BrandTable: ${file(infra/resources/dynamodb.yml):BrandTable}
    BrandBucket: ${file(infra/resources/s3.yml):BrandBucket}
    BrandBucketPolicy: ${file(infra/resources/s3.yml):BrandBucketPolicy}

functions:
  brandHealthCheck:
    handler: app/handlers/health.handler
    events:
      - http:
          method: GET
          path: /health
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST'"
            headers:
              - X-MIBAPI-CustomerType
              - X-MIBAPI-Trace-Id
              - X-MIBAPI-CustomerID
              - X-MIBAPI-Token
              - X-MIBAPI-Source
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false
  getBrand:
    handler: app/handlers/getBrand.handler
    events:
      - http:
          method: GET
          path: details/{EmailId}
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST'"
            headers:
              - X-MIBAPI-CustomerType
              - X-MIBAPI-Trace-Id
              - X-MIBAPI-CustomerID
              - X-MIBAPI-Token
              - X-MIBAPI-Source
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false
  getUser:
    handler: app/handlers/getUser.handler
    events:
      - http:
          method: GET
          path: user/{EmailId}
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST'"
            headers:
              - X-MIBAPI-CustomerType
              - X-MIBAPI-Trace-Id
              - X-MIBAPI-CustomerID
              - X-MIBAPI-Token
              - X-MIBAPI-Source
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false
          # authorizer:
          #   name: custom-authorizer
          #   identitySource: method.request.header.Authorization
          #   resultTtlInSeconds: 3600
  createbrand:
    handler: app/handlers/createBrand.handler
    events:
      - http:
          method: POST
          path: register/
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST'"
            headers:
              - X-MIBAPI-CustomerType
              - X-MIBAPI-Trace-Id
              - X-MIBAPI-CustomerID
              - X-MIBAPI-Token
              - X-MIBAPI-Source
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false
  updatebrandinfo:
    handler: app/handlers/updateBrandInfo.handler
    events:
      - http:
          method: PATCH
          path: update/{EmailId}
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST'"
            headers:
              - X-MIBAPI-CustomerType
              - X-MIBAPI-Trace-Id
              - X-MIBAPI-CustomerID
              - X-MIBAPI-Token
              - X-MIBAPI-Source
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false
  updatebankdetails:
    handler: app/handlers/updateBankDetails.handler
    events:
      - http:
          method: PATCH
          path: bank-details/{EmailId}
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST'"
            headers:
              - X-MIBAPI-CustomerType
              - X-MIBAPI-Trace-Id
              - X-MIBAPI-CustomerID
              - X-MIBAPI-Token
              - X-MIBAPI-Source
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false
  updatebusinessdetails:
    handler: app/handlers/updateBusinessDetails.handler
    events:
      - http:
          method: PATCH
          path: business-details/{EmailId}
          cors:
            origin: '*'
            AllowMethods: "'OPTIONS,GET,POST'"
            headers:
              - X-MIBAPI-CustomerType
              - X-MIBAPI-Trace-Id
              - X-MIBAPI-CustomerID
              - X-MIBAPI-Token
              - X-MIBAPI-Source
              - Content-Type
              - X-Amz-Date
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false

custom:
  stage: dev
  webpack:
    keepOutputDirectory: true
    includeModules:
      packagePath: './package.json'
    webpackConfig: 'webpack.config.js'
    packager: 'npm'
    excludeFiles: src/**/*.test.js

  domains:
    dev: api.dev.migobucks.com
  BrandTable:
    name: !Ref BrandTable
    arn: !GetAtt BrandTable.Arn
  BrandBucket:
    name: brand-onboarding-rest-apis-${self:provider.stage}
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: 'brand'
    stage: dev
    createRoute53Record: true
  bundle:
    linting: false
