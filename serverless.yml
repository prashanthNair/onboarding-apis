service:
  name: brand-onboarding-rest-api

plugins: 
  - serverless-offline
  - serverless-plugin-typescript  
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs14.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: ap-south-1
  profile: serverless-admin
  environment:
    BRAND_TABLE_NAME: ${self:custom.BrandTable.name} 
    BRAND_BUCKET_NAME: ${self:custom.BrandBucket.name}
  iam: 
   role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:ap-south-1:670022476151:table/Brand-dev 
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: arn:aws:s3:::${self:custom.BrandBucket.name}/* 

resources:
  Resources:
    BrandTable: ${file(infra/resources/dynamodb.yml):BrandTable}
    BrandBucket: ${file(infra/resources/s3.yml):BrandBucket}
    BrandBucketPolicy: ${file(infra/resources/s3.yml):BrandBucketPolicy}
    
functions:
  brandHealthCheck:
    handler: app/handlers/health.handler
    events:
      - http:
          method: GET
          path: /health
          cors: true 
  createbrand:
    handler: app/handlers/createBrand.handler
    events:
      - http:
          method: POST
          path: / 
          cors: true 
  updatebrandinfo:
    handler: app/handlers/updateBrandInfo.handler
    events:
      - http:
          method: PATCH
          path: /{BrandId}/brandinfo
          cors: true
  getbrand:
    handler: app/handlers/getBrand.handler
    events:
      - http:
          method: GET
          path: /{BrandId}
          cors: true
  updatebankdetails:
    handler: app/handlers/updateBankDetails.handler
    events:
      - http:
          method: PATCH
          path: /bankdetails/{BrandId}
          cors: true
  getbrandbyemail:
    handler: app/handlers/getBrandByEmail.handler
    events:
      - http:
          method: GET
          path: /branddetails/{EmailId}
          cors: true
  updatebusinessoverview:
    handler: app/handlers/updateBusinessOverview.handler
    events:
      - http:
          method: PATCH
          path: /branddetails/{BrandId}/businessOverview
          cors: true

custom: 
  stage: ${opt:stage, self:provider.stage}
  domains: 
    dev: api.migobucks.com
    # prod: api.migobucks.com 
  BrandTable:
    name: !Ref BrandTable
    arn: !GetAtt BrandTable.Arn 
  BrandBucket:
    name: brand-onboarding-rest-api-${self:provider.stage} 
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: 'brand'
    stage: dev 
    createRoute53Record: true 
  bundle:
    linting: false