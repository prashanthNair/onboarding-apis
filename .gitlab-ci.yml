image: docker:latest

cache:
  paths:
    - node_modules/

stages:
  - build
  - precheck 
  - deploy

build-docker-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE" -f Dockerfile.pipeline .
    - docker push "$CI_REGISTRY_IMAGE"
  only:
    changes:
      - Dockerfile.pipeline

has_lock_files:
  stage: precheck
  script:
    - "if [[ -e 'package.json' &&  ! -e 'package-lock.json' ]]; then echo 'No lock file found. Please add a package-lock.json'; false; fi"

# commented as we have lots of vulnerabilities
# security_checker:
#   stage: precheck
#   image: $CI_REGISTRY_IMAGE:latest
#   script:
#     - npm audit --audit-level=moderate

# eslint:
#   stage: precheck
#   image: $CI_REGISTRY_IMAGE:latest
#   script:
#     - npm i -D
#     - npm run lint
#     - npm run buildtest

# commented as we dont have test case as of now
# tests:
#   stage: test
#   image: $CI_REGISTRY_IMAGE:latest
#   script:
#     - npm i -D
#     - npm run test


staging_deploy:
  stage: deploy
  image: $CI_REGISTRY_IMAGE:latest
  only:
    - dev
  script:
    - npm ci
    - cd / && serverless config credentials --provider aws --key $AWS_ACCESS_KEY_ID_DEV --secret $AWS_SECRET_ACCESS_KEY_DEV && cd -
    - SLS_DEBUG=* serverless --stage stage
    - for r in $DEPLOY_REGIONS; do SLS_DEBUG=* serverless deploy --verbose --force --stage stage --region $r; done


production_deploy:
  stage: deploy
  image: $CI_REGISTRY_IMAGE:latest
  only:
    - main
  script:
    - npm ci
    - cd / && serverless config credentials --provider aws --key $AWS_ACCESS_KEY_ID_PROD
     --secret $AWS_SECRET_ACCESS_KEY_PROD && cd -
    - SLS_DEBUG=* serverless --stage prod
    - for r in $DEPLOY_REGIONS; do SLS_DEBUG=* serverless deploy --verbose --force --stage prod --region $r; done
